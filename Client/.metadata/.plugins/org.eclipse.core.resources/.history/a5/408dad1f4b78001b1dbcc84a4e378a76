import java.io.*;
import java.net.Socket;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.util.Scanner;

public class Main {
		
	// done
	public static void main(String[] args) {
		
		String adresse = lireAdresseValide();
		int port = lirePortValide();
		
		communication(adresse, port);
				
	}
	
	// done
	public static void communication(String adresse, int port) {
				
		try 
		{
			Socket serveur = null;
			
			try {
				
				serveur = new Socket(adresse, port);
            
			} catch (Exception e) {
				
				System.err.println("Impossible de se connecté a " + adresse + " sur le port " + port);
				return;
				
			}
            
            
            ObjectOutputStream fluxSortie = new ObjectOutputStream(serveur.getOutputStream());
            ObjectInputStream fluxEntree = new ObjectInputStream(serveur.getInputStream());
            
           
            	 
            while (!serveur.isClosed())  		                
                while (!commande(fluxSortie, fluxEntree, serveur));
            
            serveur.close();
        } 
		
		catch(Exception e) {
			
			System.err.println("Communication avec le serveur interompu");
			
		}
				
	}
	
	// done
	public static boolean commande(ObjectOutputStream fluxSortie, ObjectInputStream fluxEntree, Socket serveur) throws Exception {
		
		Scanner sc  = new Scanner(System.in);
		String[] commande = sc.nextLine().split(" ");
		boolean valide = false;
		
		switch(commande[0]) {
		
			case "cd": 
				
				if(!verifierParam(commande, 1)) break;						// verif du param
				
				fluxSortie.writeObject(commande);							// envoie de la commande
				System.out.println(fluxEntree.readObject());				// affichage de la reponse
				
				valide = true;
				break;
				
			case "ls": 
				
				if(!verifierParam(commande, 0)) break;						// verif du param
				
				fluxSortie.writeObject(commande);							// envoie de la commande
				for(String fichier: (String[])fluxEntree.readObject()) 		// affichage de la reponse
					System.out.println(" > " + fichier);					
				
				valide = true;
				break;
				
			case "mkdir": 
				
				if(!verifierParam(commande, 1)) break;						// verif du param
				
				fluxSortie.writeObject(commande);							// envoie de la commande
				System.out.println(fluxEntree.readObject());				// affichage de la reponse
				
				valide = true;
				break;
				
			case "upload": 
				
				if(!verifierParam(commande, 1)) break;						// verif du param
				
				if(validerFichierUpload(commande[1])) {						// verfier si l'envoie est possible
					fluxSortie.writeObject(commande);						// envoie de la commande
					copierFichier(commande[1], fluxSortie);					// copier le fichier
					System.out.println(fluxEntree.readObject());			
				}
				
				valide = true;
				break;
				
			case "download": 
				
				if(!verifierParam(commande, 1)) break;								// verif du param	
				
				fluxSortie.writeObject(commande);									// envoie de la commande
				
				System.out.println(fluxEntree.readObject());						// afficher la reponse
				
				if((boolean)fluxEntree.readObject()) {
					collerFichier((byte[])fluxEntree.readObject(), commande[1]);	// copier le fichier sur le dossier local
				}
				valide = true;
				break;
				
			case "exit": 
				
				if(!verifierParam(commande, 0)) break;					// verif du param
				
				fluxSortie.writeObject(commande);						// envoie de la commande
				System.exit(0);											// fermer le client
				
				break;
				
			default:
		}
		
		if(!valide) System.err.println("Commande inexistante");			// commande invalide

		return valide;
	}
	
	// done
	public static boolean validerFichierUpload(String nom) {
		
		try {
								
			for(String fichiers: new File("./client/").list()) {
				if(fichiers.equals(nom)) {
				
					if(new File("./client/" + nom).isDirectory()) {
						System.out.println("Le fichier demander est un repertoire. Impossible de le telecharger");
						return false;
	
					} else {
						
						return true;
						
					}
					
					
				}
				
			}
			
			System.out.println(nom + " n'existe pas");
			return false;
			
		}catch(Exception e) {
			
			System.out.println("Le repertoire ne contient aucun fichier");
			return false;
			
		}
	}
	
	// done
	public static void copierFichier(String nom, ObjectOutputStream fluxSortie) throws IOException {
				
		FileInputStream fluxFichier = null;
	    BufferedInputStream fluxEntree = null;
	    byte[] data;
	    
        try {
          // send file
          File fichier = new File ("./client/"+nom);
          data  = new byte [(int)fichier.length()];
          fluxFichier = new FileInputStream(fichier);
          fluxEntree = new BufferedInputStream(fluxFichier);
          fluxEntree.read(data,0,data.length);
          fluxSortie.writeObject(data);
                    
        } catch (Exception e) {
        	
    		System.out.println("erreur lors de la copie");
        	data = new byte[1];
            fluxSortie.writeObject(data);
			
		}
		      
	}	
	
	// done
	public static void collerFichier(byte[] data, String nom) {
				
		try {

		FileOutputStream fluxFichier = new FileOutputStream("./client/"+nom);
	    BufferedOutputStream fluxSortie =  new BufferedOutputStream(fluxFichier);
	    
	    fluxSortie.write(data, 0 , data.length);
	    fluxSortie.flush();
		System.out.println("copie de " + nom+ " reussi");

	    
		} catch (Exception e) {
			System.out.println("impossible d'ecrire le ficher: " + nom);
		}
		
	}
	
	// done
	public static String lireAdresseValide() {
		
		Scanner sc = new Scanner(System.in);
		String temp = "";
		int[] adresse = new int[4];
		
		System.out.println("Adresse IP du serveur : xxx.xxx.xxx.xxx");
				
		do {
			try {
				temp = sc.nextLine();
				for(int i = 0; i < 4; i++) {
					adresse[i] = Integer.valueOf(temp.split("\\.")[i]);
					if(adresse[i] > 254) throw new Exception("depassement d'octet");
				}
				temp = "";
			}
			catch(Exception e) {
				System.out.println("Adresse IP invalide");
			}
		} while(temp != "");
		
		return temp;

	}

	// done
	public static int lirePortValide() {
		
		Scanner sc = new Scanner(System.in);
		String temp = null;
		int port = 0;
		
		System.out.println("Port du serveur : xxxx (5000 - 5050)");
				
		do {
			try {
				temp = sc.nextLine();
				port = Integer.valueOf(temp);
				if(port < 5000 || port > 5050) throw new Exception("mauvais port");
				if(port != Math.floor( port)) throw new Exception("mauvais port");
			}
			catch(Exception e) {
				System.out.println("Port invalide");
				temp = null;
			}
		} while(temp == null);
		
		return port;
		
	}

	// done
	public static boolean verifierParam(String[] param, int nbParam) {
		
		
		
		if(nbParam != param.length-1) {
			System.err.println(param[0] + " prend " + nbParam + " parametre, vous en avez fourni " + (param.length-1));
			return false;
		}
		
		return true;
	}

}
